apiVersion: v1
kind: Namespace
metadata:
  name: qa-auto-test
  labels:
    name: qa-auto-test
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: robotframework-dashboard-app
  namespace: qa-auto-test
data:
  requirements.txt: |
    fastapi>=0.115.11
    uvicorn[standard]>=0.32.2
    jinja2>=3.1.4
    aiofiles>=24.1.0
    python-multipart>=0.0.6
    robotframework>=7.1.1
  setup.py: |
    from setuptools import setup, find_packages
    
    setup(
        name="robotframework-dashboard",
        version="0.9.4",
        packages=find_packages(),
        install_requires=[
            "fastapi>=0.115.11",
            "uvicorn[standard]>=0.32.2",
            "jinja2>=3.1.4",
            "aiofiles>=24.1.0",
            "python-multipart>=0.0.6",
            "robotframework>=7.1.1",
        ],
        entry_points={
            "console_scripts": [
                "robotdashboard=robotframework_dashboard.main:main",
            ],
        },
    )
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: robotframework-dashboard-data
  namespace: qa-auto-test
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: robotframework-dashboard-logs
  namespace: qa-auto-test
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: standard
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: robotframework-dashboard
  namespace: qa-auto-test
  labels:
    app: robotframework-dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: robotframework-dashboard
  template:
    metadata:
      labels:
        app: robotframework-dashboard
    spec:
      initContainers:
      - name: setup-app
        image: python:3.12-slim
        command: ["/bin/bash"]
        args:
          - -c
          - |
            set -e
            echo "Installing dependencies..."
            apt-get update && apt-get install -y gcc g++ git
            pip install --upgrade pip
            pip install -r /config/requirements.txt
            
            echo "Cloning repository..."
            cd /tmp
            git clone https://github.com/sankaram04/robotframework-dashboard.git app || true
            if [ ! -d "app" ]; then
              echo "Creating app structure..."
              mkdir -p app/robotframework_dashboard
              cd app
              cp /config/setup.py .
              echo "Creating minimal app structure..."
              cat > robotframework_dashboard/__init__.py << 'EOF'
            __version__ = "0.9.4"
            EOF
              cat > robotframework_dashboard/server.py << 'EOF'
            import uvicorn
            from fastapi import FastAPI
            from fastapi.responses import HTMLResponse
            
            app = FastAPI(title="Robot Framework Dashboard", version="0.9.4")
            
            @app.get("/", response_class=HTMLResponse)
            async def dashboard():
                return """
                <html>
                <head><title>Robot Framework Dashboard</title></head>
                <body>
                    <h1>Robot Framework Dashboard</h1>
                    <p>Dashboard is starting up...</p>
                    <p>Please check back in a few moments.</p>
                </body>
                </html>
                """
            
            @app.get("/health")
            async def health():
                return {"status": "healthy"}
            
            if __name__ == "__main__":
                uvicorn.run(app, host="0.0.0.0", port=8000)
            EOF
            fi
            
            echo "Installing application..."
            cd /tmp/app
            pip install -e .
            
            echo "Copying to app directory..."
            cp -r /tmp/app/* /app/
            chown -R 1000:1000 /app
            
            echo "Setup completed successfully"
        volumeMounts:
        - name: app-volume
          mountPath: /app
        - name: config-volume
          mountPath: /config
      containers:
      - name: robotframework-dashboard
        image: python:3.12-slim
        command: ["python", "-m", "robotframework_dashboard.server"]
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: ROBOTDASHBOARD_HOST
          value: "0.0.0.0"
        - name: ROBOTDASHBOARD_PORT
          value: "8000"
        - name: DATABASE_PATH
          value: "/app/data/robot_results.db"
        - name: LOG_DIR
          value: "/app/robot_logs"
        - name: PYTHONPATH
          value: "/app"
        workingDir: /app
        volumeMounts:
        - name: app-volume
          mountPath: /app
        - name: data-volume
          mountPath: /app/data
        - name: logs-volume
          mountPath: /app/robot_logs
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 200m
            memory: 256Mi
      volumes:
      - name: app-volume
        emptyDir: {}
      - name: config-volume
        configMap:
          name: robotframework-dashboard-app
      - name: data-volume
        persistentVolumeClaim:
          claimName: robotframework-dashboard-data
      - name: logs-volume
        persistentVolumeClaim:
          claimName: robotframework-dashboard-logs
---
apiVersion: v1
kind: Service
metadata:
  name: robotframework-dashboard
  namespace: qa-auto-test
  labels:
    app: robotframework-dashboard
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: robotframework-dashboard
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: robotframework-dashboard
  namespace: qa-auto-test
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt"
    kubernetes.io/ingress.class: "nginx"
spec:
  ingressClassName: nginx
  tls:
  - secretName: robotframework-dashboard-tls
    hosts:
    - robotframework-dashboard.example.com
  rules:
  - host: robotframework-dashboard.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: robotframework-dashboard
            port:
              number: 80
